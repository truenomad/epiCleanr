[{"path":"https://truenomad.github.io/epiCleanr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Mohamed . Yusuf Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"Using epiCleanr","text":"package offers tidy solution epidemiological data. houses range functions epidemiologists public health data wizards data management cleaning. include: import() imports files formats. export() exports files formats. get_admin_names() downloads admin names using various country codes naming conventions. clean_admin_names() cleans admin names using user-provided downloaded admin data. create_test() creates unit-testing functions perform various data validation. consistency_check() plot see certain variables exceed others (.e., tests vs cases). handle_outliers() detects outliers using various approaches, offers functionality manage . missing_plot() plots missing data reporting rate given variable(s) different factors.","code":""},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using epiCleanr","text":"package yet available Cran, can installed using devtools R. can install latest development version GitHub using:","code":"# The way to install it via CRAN once available # install.packages(\"epiCleanr\") # If you haven't installed the 'devtools' package, run: # install.packages(\"devtools\") devtools::install_github(\"truenomad/epiCleanr\")"},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"import-and-export","dir":"Articles","previous_headings":"Usage","what":"Import and export","title":"Using epiCleanr","text":"Inspired rio, import function allows read data wide range file formats. Additional reading options specific format can passed ellipsis (…) argument. Similarly, export function provides simple way export data various formats.","code":"# Load the epiCleanr package library(epiCleanr)  # Reading a CSV file with a specific seperator data_csv <- import(\"path/to/your/file.csv\", sep = \"\\n\")  # Import the first sheet from an Excel file data_excel <- import(\"path/to/your/file.xlsx\", sheet = 1)  # Export a Stata DTA file export(my_data, \"path/to/your/file.dta\")  # Export an RDS file export(my_data, \"path/to/your/file.rds\")  # Export an Excel file with sheets export( list(my_data = my_data1, my_data2 = my_data2), \"path/to/your/file.xlsx\")"},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"clean-strings","dir":"Articles","previous_headings":"Usage","what":"Clean strings","title":"Using epiCleanr","text":"clean_names_strings() function offers additional flexibility allowing clean just strings within columns also column names .","code":"# For data frame with snake_case (default) data(\"iris\") colnames(iris) # > \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"      cleaned_iris <- clean_names_strings(iris) colnames(cleaned_iris) # > \"sepal_length\" \"sepal_width\"  \"petal_length\" \"petal_width\"  \"species\""},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"download-administrative-names","dir":"Articles","previous_headings":"Usage","what":"Download administrative names","title":"Using epiCleanr","text":"can download administrative names (districts, provinces, etc.,) given country via GeoNames website using country name codes pull data.","code":"# Get admin names for Togo admin_names <- get_admin_names(country_name_or_code = \"Togo\")  # Different admin levels are saved as a list str(admin_names$adm2)  #>'data.frame': 30 obs. of  7 variables: #> $ country_code  : chr  \"TG\" \"TG\" \"TG\" \"TG\" ... #> $ asciiname     : chr  \"Vo Prefecture\" \"Zio Prefecture\" \"Tchaoudjo\" \"Tchamba\" ... #> $ alternatenames: chr  \"Circonscription de Vogan, Prefecture de Vo, Préfecture de Vo, ... #> $ adm2          : chr  \"Vo Prefecture\" \"Zio Prefecture\" \"Tchaoudjo\" \"Tchamba\" ... #> $ latitude      : num  6.42 6.58 9 8.83 6.67 ... #> $ longitude     : num  1.5 1.17 1.17 1.42 1.5 ... #> $ last_updated  : IDate, format: \"2019-01-08\" \"2019-01-08\" \"2022-02-17\" \"2022-02-17\" ..."},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"clean-administrative-names","dir":"Articles","previous_headings":"Usage","what":"Clean administrative names","title":"Using epiCleanr","text":"can clean administrative names using clean_admin_names function, uses various matching string distance algorithms match admin data, using list admin names well admin names GeoNames website.","code":"# Get simulated epi data for Togo  # get path  path <- system.file(   \"extdata\",    \"fake_epi_df_togo.rds\",    package = \"epiCleanr\")  # get example data fake_epi_df_togo <- import(path)  # get path  path <- system.file(   \"extdata\",    \"fake_epi_df_togo.rds\",    package = \"epiCleanr\")  # get referecne dataset with clean admin names fake_epi_df_togo <- import(path)  # Lets check how the matching looks  clean_admin_names(      country_code = \"Togo\",      admin_names_to_clean = fake_epi_df_togo$district,        user_base_admin_names = togo_admin_df$district,       report_mode = T)   #> There are 15 out of 15 (100%) admins that have been perfectly matched! #>   # A tibble: 15 × 5 #>  names_to_clean  final_names     ource_of_cleaned_name        prop_matched  matching_algorithm   #>    <chr>         <chr>           <chr>                          <dbl>       <chr>                #>  1 Bas-Mono      Bas-Mono        User base admin names          100         Levenshtein Distance #>  2 Bliita        Blitta          Main admin name from geonames  100         Soundex              #>  3 Centrale      Centrale        User base admin names          100         Levenshtein Distance #>  4 Cinkaasi      Cinkassé        User base admin names          100         Soundex              #>  5 Dankben       Dankpen         Main admin name from geonames  100         Soundex              #>  6 East-Mono     Est-Mono        Main admin name from geonames  100         Soundex              #>  7 Kaloto        Kloto           Main admin name from geonames  100         Soundex              #>  8 Keéran        Keran           Alternative name from geonames 100         Soundex              #>  9 Lomé          Lomé            User base admin names          100         Levenshtein Distance #> 10 Ogou          Ogou            Main admin name from geonames  100         Levenshtein Distance #> 11 Sotouboua     Sotouboua       Main admin name from geonames  100         Levenshtein Distance #> 12 Tchamaba      Tchamba         Main admin name from geonames  100         Soundex              #> 13 Vo            Vo Prefecture   Main admin name from geonames  100         Levenshtein Distance #> 14 Yotto         Yoto            Main admin name from geonames  100         Soundex     #> 15 Zioo          Zio Prefecture  Main admin name from geonames  100         Soundex           # If we are happy with the names, we can update the old names with the new ones # otherwise we can further clean the names manually fake_epi_df_togo$district <-  clean_admin_names(         country_code = \"Togo\",         admin_names_to_clean = fake_epi_df_togo$district,          user_base_admin_names = togo_admin_df$district,          report_mode = F)"},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"create-unit-testing-functions","dir":"Articles","previous_headings":"Usage","what":"Create unit testing functions","title":"Using epiCleanr","text":"create_test users can create functions can use unit-testing working datasets require lots manipulation wrangling. function (plus tidylog package) save users headache troubleshooting issues related data joins transformations.","code":"# Set up a unit-testing fucntion my_tests <- create_test(         # For checking the dimension of the data         dimension_test = c(900, 9),          # For expected number of combinations in data         combinations_test = list(         variables = c(\"month\", \"year\", \"district\"),         expectation = 12 * 5 * 15),         # Check repeated cols, rows and max and min thresholds         row_duplicates = TRUE, col_duplicates = TRUE,         max_threshold_test = list(malaria_tests = 1000, cholera_tests = 1000),         min_threshold_test = list(cholera_cases = 0, cholera_cases = 0)         )  # Apply your unit-test on your data my_tests(fake_epi_df_togo)  #> Test passed! You have the correct number of dimensions! #> Test passed! No duplicate rows found! #> Test passed! No repeated columns found! #> Test passed! You have the correct number of combinations for month, year, district! #> Test passed! Values in column cholera_cases are above the threshold. #> Test passed! Values in column cholera_cases are above the threshold. #> Test passed! Values in column malaria_tests are below the threshold. #> Test passed! Values in column cholera_tests are below the threshold.  #> Congratulations! All tests passed: 8/8 (100%) 😀"},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"consistency-check","dir":"Articles","previous_headings":"Usage","what":"Consistency check","title":"Using epiCleanr","text":"consistency_check function serves function validating logical relationships variables. instance, know number disease cases exceed number tests disease, function helps inspect expected behaviours data.","code":"# Run checks using Togo data consistency_check(fake_epi_df_togo,                   tests = c(\"malaria_tests\", \"cholera_tests\"),                   cases = c(\"malaria_cases\", \"cholera_cases\"))  #> Consistency test passed for malaria_tests vs malaria_cases: There are more tests than there are cases! #> Consistency test failed for cholera_tests vs cholera_cases: There are 3 (0.33%) rows where cases are greater than tests.               # You can even save the plot if you want ggplot2::ggsave(\"../man/figures/consistency_plot.png\", width = 10,                  height = 5.75, scale = 0.95, dpi = 400, bg = \"white\")"},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"detecting-and-handling-outliers","dir":"Articles","previous_headings":"Usage","what":"Detecting and handling outliers","title":"Using epiCleanr","text":"handle_outliers function designed identifying addressing outliers dataset. supports multiple statistical methods outlier detection, Z-score, modified Z-score, Interquartile Range. Beyond detection, function offers various options handling outliers, including removal replacement mean, median, grouped means, quantiles.","code":"# Select the variables variables <- c(\"malaria_tests\", \"malaria_cases\",                \"cholera_tests\", \"cholera_cases\")  # Get outliers report outliers <- handle_outliers(     fake_epi_df_togo, vars = variables,     method = \"zscore\", report_mode = TRUE)  # Get the report outliers$report  #>   variable      test    outliers prop_outliers #>   <chr>         <chr>   <glue>   <chr>         #> 1 malaria_tests Z-Score 5/900    <1%           #> 2 malaria_cases Z-Score 5/900    <1%           #> 3 cholera_tests Z-Score 2/900    <1%           #> 4 cholera_cases Z-Score 1/900    <1%            # Get the plot outliers$plot  # You can even save the plot if you want # ggplot2::ggsave(\"../man/figures/outliers_plot.png\", width = 10,  #                height = 7, scale = 0.95, dpi = 400)  # If happy, create a dataframe with the outliers handled  fake_epi_df_togo_no_outliers <- handle_outliers(                                        fake_epi_df_togo, vars = variables,                                         method = \"zscore\", report_mode = FALSE,                                         treat_method = \"mean\")"},{"path":"https://truenomad.github.io/epiCleanr/articles/using_epicleanr.html","id":"checking-missing-data-and-reporting-rates-over-factors","dir":"Articles","previous_headings":"Usage","what":"Checking missing data and reporting rates over factors","title":"Using epiCleanr","text":"missing_plot function allows visualize missing data across different variables, either single factor like time district, two factors simultaneously like date district. particularly useful ’re dealing epidemiological data might varying degrees completeness across different times locations.","code":"# Make date columns fake_epi_df_togo2 <- fake_epi_df_togo |>     dplyr::mutate(date = lubridate::as_date(paste0(year, month, \"/01\")))    # Missing rate for variables across dates missing_plot(fake_epi_df_togo2, miss_vars = variables,                x_var = \"date\", use_rep_rate = F) # Reporting rate for malaria_cases across dates and districts missing_plot(fake_epi_df_togo2, miss_vars = \"malaria_cases\",                x_var = \"date\", y_var = \"district\", use_rep_rate = T)"},{"path":"https://truenomad.github.io/epiCleanr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mohamed . Yusuf. Author, maintainer.","code":""},{"path":"https://truenomad.github.io/epiCleanr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yusuf M (2023). epiCleanr: Tidy Solution Epidemiological Data. https://github.com/truenomad/epiCleanr, https://truenomad.github.io/epiCleanr/.","code":"@Manual{,   title = {epiCleanr: A Tidy Solution for Epidemiological Data},   author = {Mohamed A. Yusuf},   year = {2023},   note = {https://github.com/truenomad/epiCleanr, https://truenomad.github.io/epiCleanr/}, }"},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"A Tidy Solution for Epidemiological Data","text":"package offers tidy solution epidemiological data. houses range functions epidemiologists public health data wizards data management cleaning. details use package, visit epiCleanr website.","code":""},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Tidy Solution for Epidemiological Data","text":"package available Cran can installed following way: install development version GitHub: Load package:","code":"install.packages(\"epiCleanr\") library(\"epiCleanr\") # If you haven't installed the 'devtools' package, run: # install.packages(\"devtools\") devtools::install_github(\"truenomad/epiCleanr\") library(epiCleanr)"},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"quick-workflow-overview","dir":"","previous_headings":"","what":"Quick Workflow Overview","title":"A Tidy Solution for Epidemiological Data","text":"epiCleanr used helper package end--end epidemiological data management, offering functionalities ranging data importation quality assessment cleaning exporting files. workflow steps package streamlines:","code":""},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"import-data","dir":"","previous_headings":"Quick Workflow Overview","what":"Import Data","title":"A Tidy Solution for Epidemiological Data","text":"Utilise import() seamlessly read data wide array file formats, CSV Excel JSON, within one function.","code":""},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"data-quality-checks","dir":"","previous_headings":"Quick Workflow Overview","what":"Data Quality Checks","title":"A Tidy Solution for Epidemiological Data","text":"consistency_check(): Generate plots identify inconsistencies, number tests exceeds number cases. missing_plot(): Visualize patterns missing data reporting rates across different variables factors. create_test(): Establish unit-testing functions automate data validation, ensuring robustness dataset.","code":""},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"data-cleaning","dir":"","previous_headings":"Quick Workflow Overview","what":"Data Cleaning","title":"A Tidy Solution for Epidemiological Data","text":"clean_admin_names(): Normalize administrative names dataset using either user-supplied data downloaded reference data via get_admin_names(). cleaning_names_strings(): Use function clean standardize string columns data. handle_outliers(): Detect manage outliers using variety statistical methods, providing options either remove impute .","code":""},{"path":"https://truenomad.github.io/epiCleanr/index.html","id":"data-export","dir":"","previous_headings":"Quick Workflow Overview","what":"Data Export","title":"A Tidy Solution for Epidemiological Data","text":"Finally, use export() save cleaned data back multiple file formats, CSV, Excel, specialized formats.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_admin_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and Match Administrative Names — clean_admin_names","title":"Clean and Match Administrative Names — clean_admin_names","text":"function takes administrative names cleans using various matching string distance algorithms. can also match cleaned names base list provided user fetched `GeoNames`, official repository standard spellings foreign geographic names.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_admin_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and Match Administrative Names — clean_admin_names","text":"","code":"clean_admin_names(   admin_names_to_clean,   country_code,   admin_level = \"adm2\",   user_base_admin_names = NULL,   report_mode = FALSE )"},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_admin_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and Match Administrative Names — clean_admin_names","text":"admin_names_to_clean character vector administrative names clean. country_code sed `use_get_admin_names` TRUE. character string numerical value country code (e.g., 123\"KE\"). U can various formats country name, ISO codes, UN codes, etc., see countrycode::codelist() full list codes naming conventions used. admin_level character string indicating administrative level (e.g., \"adm2\"). user_base_admin_names character administrative names use like use reference. necessary, downloaded  `GeoNames` used missing. report_mode logical indicating whether return detailed report. Default FALSE.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_admin_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and Match Administrative Names — clean_admin_names","text":"`report_mode` set TRUE, data frame containing original        admin names matched cleaned admin names inormation        source data used clean including algorithm used,        else cleaned list names returned.","code":""},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_admin_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and Match Administrative Names — clean_admin_names","text":"","code":"# \\donttest{ # Example with country code base_names <- c(   \"Paris\", \"Marseille\", \"Lyon\",   \"Toulouse\", \"Nice\", \"Nantes\", \"Strasbourg\",   \"Montpellier\", \"Bordeaux\", \"Lille\" )  unclean_names <- c(   \"Pariis\", \"Marseill\", \"Lyone\",   \"Toulous\", \"Niice\", \"Nantees\", \"Strasbourgh\",   \"Montpeelier\", \"Bordeuax\", \"Lilie\" )  france_new <- clean_admin_names(   country_code = \"Fr\",   user_base_admin_names = base_names,   admin_names_to_clean = unclean_names ) #> There are 10 out of 10 (100%) admins that have been perfectly matched!  #>  Use `report_mode` to double check your matches.  print(france_new) #>  [1] \"Paris\"       \"Marseille\"   \"Lyon\"        \"Toulouse\"    \"Nice\"        #>  [6] \"Nantes\"      \"Strasbourg\"  \"Montpellier\" \"Bordeaux\"    \"Lille\"       # }"},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_names_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean variable names or column names in various styles — clean_names_strings","title":"Clean variable names or column names in various styles — clean_names_strings","text":"function transforms variable names column names one standard cleaned formats specified `style` argument. offers flexibility janitor::clean_names() function supporting individual strings providing multiple naming styles.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_names_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean variable names or column names in various styles — clean_names_strings","text":"","code":"clean_names_strings(input, style = \"snake_case\")"},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_names_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean variable names or column names in various styles — clean_names_strings","text":"input data frame, tibble, matrix, list, character vector representing names cleaned. style character string specifying naming style use. Available options \"snake_case\" (default), \"camel_case\", \"simple_clean\".","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_names_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean variable names or column names in various styles — clean_names_strings","text":"object cleaned names.","code":""},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/reference/clean_names_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean variable names or column names in various styles — clean_names_strings","text":"","code":"library(data.table) library(zoo) #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric library(xts) #>  #> Attaching package: ‘xts’ #> The following objects are masked from ‘package:data.table’: #>  #>     first, last  # For data frame with snake_case (default) data(\"iris\") cleaned_iris <- clean_names_strings(iris) colnames(cleaned_iris) #> [1] \"sepal_length\" \"sepal_width\"  \"petal_length\" \"petal_width\"  \"species\"       # For data frame with camel_case cleaned_iris_camel <- clean_names_strings(iris, style = \"camel_case\") colnames(cleaned_iris_camel) #> [1] \"sepalLength\" \"sepalWidth\"  \"petalLength\" \"petalWidth\"  \"species\"      # For character vector original_names <- c(\"Some Column\", \"Another-Column!\", \"Yet Another Column\") cleaned_names <- clean_names_strings(original_names, style = \"simple_clean\") print(cleaned_names) #> [1] \"somecolumn\"       \"anothercolumn\"    \"yetanothercolumn\"  # For matrix mat <- matrix(1:4, ncol = 2) colnames(mat) <- c(\"Some Column\", \"Another Column\") cleaned_mat <- clean_names_strings(mat) colnames(cleaned_mat) #> [1] \"some_column\"    \"another_column\"  # For list lst <- list(\"Some Column\" = 1, \"Another Column\" = 2) cleaned_lst <- clean_names_strings(lst) names(cleaned_lst) #> [1] \"some_column\"    \"another_column\"  # For xts object xts_obj <- xts(x = matrix(1:4, ncol = 2),                order.by = as.Date('2021-01-01') + 0:1) colnames(xts_obj) <- c(\"Some Column\", \"Another Column\") cleaned_xts <- clean_names_strings(xts_obj) print(colnames(cleaned_xts)) #> [1] \"some_column\"    \"another_column\"  zoo_obj <- zoo(matrix(1:4, ncol = 2), order.by = 1:2) colnames(zoo_obj) <- c(\"Some Column\", \"Another Column\") cleaned_zoo <- clean_names_strings(zoo_obj) print(colnames(cleaned_zoo)) #> [1] \"some_column\"    \"another_column\"  # for Data table dt <- data.table(\"Some Column\" = 1:2, \"Another Column\" = 3:4) cleaned_dt <- clean_names_strings(dt) print(names(cleaned_dt)) #> [1] \"some_column\"    \"another_column\""},{"path":"https://truenomad.github.io/epiCleanr/reference/consistency_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Consistency Check Function — consistency_check","title":"Consistency Check Function — consistency_check","text":"function performs consistency check ensure number tests greater number cases given columns dataset. returns ggplot2 object visualizing results.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/consistency_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consistency Check Function — consistency_check","text":"","code":"consistency_check(data, tests, cases)"},{"path":"https://truenomad.github.io/epiCleanr/reference/consistency_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consistency Check Function — consistency_check","text":"data data frame containing test case data. tests character vector specifying column names test data. cases character vector specifying column names case data. length 'tests' 'cases' must , element 'tests' corresponds element 'cases'.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/consistency_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consistency Check Function — consistency_check","text":"ggplot2::ggplot() object showing consistency number tests cases. x-axis represents cases, y-axis represents tests. facet represents disease, diagonal line shows number tests equals number cases.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/consistency_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consistency Check Function — consistency_check","text":"","code":"# check the consistency between malaria tests and cases  # get path path <- system.file(         \"extdata\",         \"fake_epi_df_togo.rds\",          package = \"epiCleanr\")  fake_epi_df_togo <- import(path)  consistency_check(fake_epi_df_togo,                   tests = c(\"malaria_tests\",\"cholera_tests\"),                   cases = c(\"malaria_cases\", \"cholera_cases\")) #> Consistency test passed for malaria_tests vs malaria_cases: There are more tests than there are cases! #> Consistency test failed for cholera_tests vs cholera_cases: There are 1 (0.11%) rows where cases are greater than tests."},{"path":"https://truenomad.github.io/epiCleanr/reference/create_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Test Function — create_test","title":"Create Test Function — create_test","text":"function creates test function perform various data validation checks. returned function can applied dataset perform specified tests.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/create_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Test Function — create_test","text":"","code":"create_test(   dimension_test = NULL,   combinations_test = NULL,   row_duplicates = FALSE,   col_duplicates = FALSE,   min_threshold_test = NULL,   max_threshold_test = NULL )"},{"path":"https://truenomad.github.io/epiCleanr/reference/create_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Test Function — create_test","text":"dimension_test vector two integers specifying expected number rows columns. combinations_test list elements `variables` (character vector variable names) `expectation` (integer specifying expected number unique combinations column). row_duplicates Logical. TRUE, checks duplicate rows. col_duplicates Logical. TRUE, checks duplicate columns. min_threshold_test Named list minimum threshold values specified columns. max_threshold_test Named list maximum threshold values specified columns.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/create_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Test Function — create_test","text":"function applied dataset.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/create_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Test Function — create_test","text":"","code":"# get path path <- system.file(         \"extdata\",         \"fake_epi_df_togo.rds\",          package = \"epiCleanr\")  fake_epi_df_togo <- import(path)  # Set up unit-test function my_tests <- create_test(   # For checking the dimension of the data   dimension_test = c(900, 9),   # For expected number of combinations in data  combinations_test = list(    variables = c(\"month\", \"year\", \"district\"),    expectation = 12 * 5 * 15),   # Check repeated cols, rows and max and min thresholds   row_duplicates = TRUE, col_duplicates = TRUE,   max_threshold_test = list(malaria_tests = 1000, cholera_tests = 1000),  min_threshold_test = list(cholera_cases = 0, cholera_cases = 0) )  result <- my_tests(fake_epi_df_togo) #> Test passed! You have the correct number of dimensions! #> Test passed! No duplicate rows found! #> Test passed! No repeated columns found! #> Test passed! You have the correct number of combinations for month, year, district! #> Test passed! Values in column cholera_cases are above the threshold. #> Test passed! Values in column cholera_cases are above the threshold. #> Test passed! Values in column malaria_tests are below the threshold. #> Test passed! Values in column cholera_tests are below the threshold. #> Congratulations! All tests passed: 8/8 (100%) 🎉"},{"path":"https://truenomad.github.io/epiCleanr/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Data to Various File Formats — export","title":"Export Data to Various File Formats — export","text":"function provides unified interface exporting data various file formats supported rio::export() function. format automatically detected file extension simplify exporting process.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Data to Various File Formats — export","text":"","code":"export(data, file_path, ...)"},{"path":"https://truenomad.github.io/epiCleanr/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Data to Various File Formats — export","text":"data dataset exported. file_path Character string specifying path output file. ... Additional arguments passed underlying write functions. arguments specific file format exported. Please refer documentation package used information.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Data to Various File Formats — export","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/reference/export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Data to Various File Formats — export","text":"","code":"# Create temporary account tmpdir <- tempfile() dir.create(tmpdir)  # Export a CSV file export(mtcars, file_path = file.path(tmpdir, \"file.csv\"))  # Export an Excel file export(mtcars, file_path = file.path(tmpdir, \"file.xlsx\"))  # Export a Stata DTA file export(mtcars, file_path = file.path(tmpdir, \"file.dta\"))  # Export an RDS file export(mtcars, file_path = file.path(tmpdir, \"file.rds\"))  # Export an RData file export(list(mtcars = mtcars, iris = iris),        file_path = file.path(tmpdir, \"file.RData\"))  # Remove the temporary directory and its contents unlink(tmpdir, recursive = TRUE)"},{"path":"https://truenomad.github.io/epiCleanr/reference/get_admin_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Administrative Names from GeoNames — get_admin_names","title":"Retrieve Administrative Names from GeoNames — get_admin_names","text":"function grabs administrative region names (districts, provinces, etc.) given country `GeoNames` website. accepts country names various country coding schemes.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/get_admin_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Administrative Names from GeoNames — get_admin_names","text":"","code":"get_admin_names(country_name_or_code, silent_mode = TRUE)"},{"path":"https://truenomad.github.io/epiCleanr/reference/get_admin_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Administrative Names from GeoNames — get_admin_names","text":"country_name_or_code Character numeric. name code country administrative names retrieved. can various formats country name, ISO codes, UN codes, etc., see `countrycode::codelist()` full list codes naming conventions used. silent_mode logical indicating whether suppress messages. Default TRUE.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/get_admin_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Administrative Names from GeoNames — get_admin_names","text":"list containing administrative region names details         different administrative levels (e.g., ADM1, ADM2, etc.).         element list corresponds different administrative level         contains data frame columns country_code,  ascii         name, alternate names, latitude, longitude, date last updated.","code":""},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/reference/get_admin_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Administrative Names from GeoNames — get_admin_names","text":"","code":"# \\donttest{ # example using different naming/code conventions three_digit <- get_admin_names(\"TGO\")   # using 3 digit iso codes two_digit <- get_admin_names(\"TG\")      # using 2 digit iso codes un_code <- get_admin_names(768)         # using UN codes full_name <-  get_admin_names(\"Togo\")   # using full names  str(full_name$adm2) #> 'data.frame':\t30 obs. of  7 variables: #>  $ country_code  : chr  \"TG\" \"TG\" \"TG\" \"TG\" ... #>  $ asciiname     : chr  \"Vo Prefecture\" \"Zio Prefecture\" \"Tchaoudjo\" \"Tchamba\" ... #>  $ alternatenames: chr  \"Circonscription de Vogan, Prefecture de Vo, Préfecture de Vo, Vo\" \"Circonscription de Tsevie, Circonscription de Tsévié, Prefecture de Tsevie, Prefecture du Zio, Préfecture de Ts\"| __truncated__ \"Circonscription de Tchaoudjo, Prefecture de Tchaoudjo, Préfecture de Tchaoudjo, Sokode, Sokodé, Tchaoudjo\" \"Circonscription de Tchamba, Prefecture de Tchamba, Préfecture de Tchamba, Tchamba\" ... #>  $ adm2          : chr  \"Vo Prefecture\" \"Zio Prefecture\" \"Tchaoudjo\" \"Tchamba\" ... #>  $ latitude      : num  6.42 6.58 9 8.83 6.67 ... #>  $ longitude     : num  1.5 1.17 1.17 1.42 1.5 ... #>  $ last_updated  : IDate, format: \"2019-01-08\" \"2019-01-08\" ... # }"},{"path":"https://truenomad.github.io/epiCleanr/reference/handle_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and Handle Outliers in Dataset — handle_outliers","title":"Detect and Handle Outliers in Dataset — handle_outliers","text":"function identifies handles outliers given dataset using various methods including Z-Score, Modified Z-Score, Inter-Quartile Range  (IQR). also provides options treat identified outliers, using  mean, median, rolling mean group inter-quartile range. also  option generate summary report plot.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/handle_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and Handle Outliers in Dataset — handle_outliers","text":"","code":"handle_outliers(   data,   vars = NULL,   method = NULL,   zscore_threshold = 3,   mod_zscore_threshold = 3.5,   iqr_k_value = 1.5,   treat_method = \"none\",   grouping_vars = NULL,   report_mode = FALSE )"},{"path":"https://truenomad.github.io/epiCleanr/reference/handle_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and Handle Outliers in Dataset — handle_outliers","text":"data Dataframe containing variables checked outliers. vars Character vector variable names check outliers. Default NULL, selects numeric columns. method Character indicating method outlier detection. Options \"zscore\", \"modified_zscore\", \"iqr_method\". Default NULL, applies methods. zscore_threshold Numeric value Z-Score threshold. Default 3. mod_zscore_threshold Numeric value Modified Z-Score threshold. Default 3.5. iqr_k_value Numeric value IQR multiplier. Default 1.5. treat_method Character indicating treat outliers. Options \"none\", \"remove\", \"mean\", \"median\", \"grouped_mean\", \"quantile\". Default \"none\". grouping_vars Character vector grouping variables \"grouped_mean\". Required treat_method  \"grouped_mean\". report_mode Logical, TRUE, function returns summary report plot. Default FALSE.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/handle_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and Handle Outliers in Dataset — handle_outliers","text":"report_mode TRUE, list containing summary dataframe ggplot object. Otherwise, dataframe outliers treated according treat_method.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/handle_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect and Handle Outliers in Dataset — handle_outliers","text":"","code":"# get path path <- system.file(         \"extdata\",         \"fake_epi_df_togo.rds\",          package = \"epiCleanr\")  fake_epi_df_togo <- import(path)  variables <- c(\"malaria_tests\", \"malaria_cases\",                  \"cholera_tests\", \"cholera_cases\") result <- handle_outliers(fake_epi_df_togo, vars = variables,                method = \"zscore\", report_mode = TRUE)  print(result$report) #> # A tibble: 4 × 4 #>   variable      test    outliers prop_outliers #>   <chr>         <chr>   <glue>   <chr>         #> 1 malaria_tests Z-Score 3/900    <1%           #> 2 malaria_cases Z-Score 5/900    <1%           #> 3 cholera_tests Z-Score 1/900    <1%           #> 4 cholera_cases Z-Score 2/900    <1%            print(result$plot)"},{"path":"https://truenomad.github.io/epiCleanr/reference/import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Data from Various File Formats — import","title":"Import Data from Various File Formats — import","text":"function provides unified interface importing data various file formats supported rio package. format automatically detected file extension simplify importing process.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Data from Various File Formats — import","text":"","code":"import(file_path, ...)"},{"path":"https://truenomad.github.io/epiCleanr/reference/import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Data from Various File Formats — import","text":"file_path Character string specifying path input file URL pointing dataset. ... Additional arguments passed underlying read functions. arguments specific file format imported. Please refer documentation package used information.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Data from Various File Formats — import","text":"data frame appropriate R object containing imported data.","code":""},{"path":[]},{"path":"https://truenomad.github.io/epiCleanr/reference/import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Data from Various File Formats — import","text":"","code":"# Locate test data directory path <-  system.file(\"extdata\",                      package = \"epiCleanr\")  # Import a CSV file data_csv <- import(file_path = file.path(path, \"test_data.csv\"))  # Import an Excel file data_excel <- import(file_path = file.path(path, \"test_data.xlsx\"))  # Import a Stata DTA file data_dta <- import(file_path = file.path(path, \"test_data.dta\"))  # Import an RDS file data_rds <- import(file_path = file.path(path, \"test_data.rds\"))  # Import an RData file data_rdata <- import(file_path = file.path(path, \"test_data.RData\"))  # Import an SPSS file data_spss <- import(file_path = file.path(path, \"test_data.sav\"))"},{"path":"https://truenomad.github.io/epiCleanr/reference/missing_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Missing data over time — missing_plot","title":"Plot Missing data over time — missing_plot","text":"function visualizes proportion missing data reporting rate specified variables dataset. creates tile plot using ggplot2; x-axis can represent categorical time time (e.g., year, month), y-axis can represents either variables groupings (e.g., state). output can manipulated one's needs.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/missing_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Missing data over time — missing_plot","text":"","code":"missing_plot(data, x_var, y_var = NULL, miss_vars = NULL, use_rep_rate = FALSE)"},{"path":"https://truenomad.github.io/epiCleanr/reference/missing_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Missing data over time — missing_plot","text":"data data frame containing data visualized. Must include columns specified 'x_var', 'y_var', 'vars'. x_var character string specifying time variable 'data' (e.g., \"year\", \"month\"). Must provided. y_var optional character string specifying grouping variable 'data' (e.g., \"state\"). provided, one variable can specified 'vars'. miss_vars optional character vector specifying variables visualized 'data'. NULL, variables except 'x_var' 'y_var' used. use_rep_rate logical value. TRUE, reporting rate visualized; otherwise, proportion missing data visualized. Defaults FALSE","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/missing_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Missing data over time — missing_plot","text":"ggplot2 object representing tile plot.","code":""},{"path":"https://truenomad.github.io/epiCleanr/reference/missing_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Missing data over time — missing_plot","text":"","code":"# get path path <- system.file(         \"extdata\",         \"fake_epi_df_togo.rds\",          package = \"epiCleanr\")  fake_epi_df_togo <- import(path)  # Check misisng data by year result <- missing_plot(fake_epi_df_togo,              x_var = \"year\", use_rep_rate = FALSE)"}]
